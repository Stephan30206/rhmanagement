import React, { useState, useEffect, useRef } from 'react';
import { X, Save, User, Phone, Briefcase, DollarSign, Percent, Upload, Camera, Plus, Trash2, RefreshCw, Calendar } from 'lucide-react';
import { type Employe, employeService, demandeCongeService } from '../services/api';

interface EmployeFormProps {
    employe?: Employe | null;
    onClose: () => void;
    onSave: () => void;
}

interface Enfant {
    nom: string;
    dateNaissance: string;
}

interface Diplome {
    typeDiplome: string;
    intitule: string;
    ecole: string;
    anneeObtention: string;
}

const EmployeForm: React.FC<EmployeFormProps> = ({ employe, onClose, onSave }) => {
    const [formData, setFormData] = useState({
        matricule: '',
        nom: '',
        prenom: '',
        dateNaissance: '',
        lieuNaissance: '',
        nationalite: 'Malgache',
        cin: '',
        adresse: '',
        telephone: '',
        email: '',
        photoProfil: '',
        statutMatrimonial: 'CELIBATAIRE',
        dateMariage: '',
        nomConjoint: '',
        dateNaissanceConjoint: '',
        nombreEnfants: 0,
        numeroCNAPS: '',
        contactUrgenceNom: '',
        contactUrgenceLien: '',
        contactUrgenceTelephone: '',
        nomPere: '',
        nomMere: '',
        poste: 'PASTEUR_STAGIAIRE',
        organisationEmployeur: '',
        typeContrat: 'CDD',
        dateDebut: '',
        dateFin: '',
        salaireBase: '',
        pourcentageSalaire: '',
        statut: 'ACTIF',
        dateAccreditation: '',
        niveauAccreditation: 'DISTRICT',
        groupeAccreditation: '',
        superviseurHierarchique: '',
        affectationActuelle: '',
        postePersonnalise: '',
        nouveauPoste: ''
    });

    const [enfants, setEnfants] = useState<Enfant[]>([]);
    const [nouvelEnfant, setNouvelEnfant] = useState<Enfant>({ nom: '', dateNaissance: '' });
    const [diplomes, setDiplomes] = useState<Diplome[]>([]);
    const [nouveauDiplome, setNouveauDiplome] = useState<Diplome>({
        typeDiplome: '',
        intitule: '',
        ecole: '',
        anneeObtention: ''
    });
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [photoPreview, setPhotoPreview] = useState<string | null>(null);
    const [photoFile, setPhotoFile] = useState<File | null>(null);
    const [, setUploadingPhoto] = useState(false);
    const [isMatriculeAutoGenerated, setIsMatriculeAutoGenerated] = useState(true);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [affectationActuelleAuto, setAffectationActuelleAuto] = useState('');

    const [hasCongeActif, setHasCongeActif] = useState(false);
    const [congeActif, setCongeActif] = useState<any>(null);

    // Fonction pour vérifier le congé actif
    const verifierCongeActif = async (employeId: number) => {
        try {
            const aujourdhui = new Date().toISOString().split('T')[0];
            const demandes = await demandeCongeService.getByEmployeId(employeId);

            const congeEnCours = demandes.find(demande =>
                demande.statut === 'APPROUVE' &&
                demande.dateDebut <= aujourdhui &&
                demande.dateFin >= aujourdhui
            );

            if (congeEnCours) {
                setCongeActif(congeEnCours);
                setHasCongeActif(true);
                // Mettre automatiquement le statut à EN_CONGE si un congé est actif
                setFormData(prev => ({ ...prev, statut: 'EN_CONGE' }));
            } else {
                setCongeActif(null);
                setHasCongeActif(false);
                // Si pas de congé actif et statut était EN_CONGE, remettre à ACTIF
                if (formData.statut === 'EN_CONGE') {
                    setFormData(prev => ({ ...prev, statut: 'ACTIF' }));
                }
            }
        } catch (error) {
            console.error('Erreur vérification congé actif:', error);
            setCongeActif(null);
            setHasCongeActif(false);
        }
    };

    // Fonction pour générer un matricule automatique
    const generateMatricule = async () => {
        try {
            // Récupérer le dernier matricule pour incrémenter
            const employes = await employeService.getAllEmployes();
            const lastMatricule = employes
                .filter(e => e.matricule && e.matricule.startsWith('FMC-'))
                .sort((a, b) => b.matricule.localeCompare(a.matricule))[0]?.matricule;

            let nextNumber = 1;
            if (lastMatricule) {
                const parts = lastMatricule.split('-');
                if (parts.length === 3) {
                    const lastNumber = parseInt(parts[2], 10);
                    if (!isNaN(lastNumber)) {
                        nextNumber = lastNumber + 1;
                    }
                }
            }

            const year = new Date().getFullYear();
            return `FMC-${year}-${nextNumber.toString().padStart(3, '0')}`;
        } catch (error) {
            console.error('Erreur génération matricule:', error);
            const year = new Date().getFullYear();
            return `FMC-${year}-001`;
        }
    };

    // UseEffect pour calculer l'affectation actuelle automatiquement
    useEffect(() => {
        const calculerAffectationActuelle = async () => {
            if (employe?.id) {
                try {
                    // Récupérer les affectations pastorales de l'employé
                    const response = await fetch(`http://localhost:8080/api/affectations-pastorales/pasteur/${employe.id}`);

                    if (response.ok) {
                        const affectations = await response.json();

                        // Trouver l'affectation active (en cours)
                        const aujourdhui = new Date();

                        const affectationActive = affectations.find((aff: any) => {
                            const dateDebut = new Date(aff.dateDebut);
                            const dateFin = aff.dateFin ? new Date(aff.dateFin) : null;

                            // Vérifier si l'affectation est active actuellement
                            return dateDebut <= aujourdhui &&
                                (!dateFin || dateFin >= aujourdhui);
                        });

                        if (affectationActive) {
                            setAffectationActuelleAuto(`${affectationActive.district} (${affectationActive.fonction})`);
                        } else {
                            setAffectationActuelleAuto('Non affecté');
                        }
                    } else {
                        setAffectationActuelleAuto('Non affecté');
                    }
                } catch (error) {
                    console.error('Erreur lors du chargement des affectations:', error);
                    setAffectationActuelleAuto('Erreur de chargement');
                }
            } else if (!employe) {
                // Pour un nouvel employé, on laisse vide
                setAffectationActuelleAuto('');
            }
        };

        calculerAffectationActuelle();
    }, [employe]);

    // Générer le matricule automatiquement au chargement pour les nouveaux employés
    useEffect(() => {
        const initMatricule = async () => {
            if (!employe) {
                const autoMatricule = await generateMatricule();
                setFormData(prev => ({ ...prev, matricule: autoMatricule }));
                setIsMatriculeAutoGenerated(true);
            }
        };
        initMatricule();
    }, [employe]);

    useEffect(() => {
        if (employe) {
            setFormData({
                matricule: employe.matricule || '',
                nom: employe.nom || '',
                prenom: employe.prenom || '',
                dateNaissance: employe.dateNaissance || '',
                lieuNaissance: employe.lieuNaissance || '',
                nationalite: employe.nationalite || 'Malgache',
                cin: employe.cin || '',
                adresse: employe.adresse || '',
                telephone: employe.telephone || '',
                email: employe.email || '',
                photoProfil: employe.photoProfil || '',
                statutMatrimonial: employe.statutMatrimonial || 'CELIBATAIRE',
                dateMariage: employe.dateMariage || '',
                nomConjoint: employe.nomConjoint || '',
                dateNaissanceConjoint: employe.dateNaissanceConjoint || '',
                nombreEnfants: employe.nombreEnfants || 0,
                numeroCNAPS: employe.numeroCNAPS || '',
                contactUrgenceNom: employe.contactUrgenceNom || '',
                contactUrgenceLien: employe.contactUrgenceLien || '',
                contactUrgenceTelephone: employe.contactUrgenceTelephone || '',
                nomPere: employe.nomPere || '',
                nomMere: employe.nomMere || '',
                poste: employe.poste || 'PASTEUR_STAGIAIRE',
                postePersonnalise: employe.postePersonnalise || '',
                nouveauPoste: employe.nouveauPoste || '',
                organisationEmployeur: employe.organisationEmployeur || '',
                typeContrat: employe.typeContrat || 'CDD',
                dateDebut: employe.dateDebut || '',
                dateFin: employe.dateFin || '',
                salaireBase: employe.salaireBase?.toString() || '',
                pourcentageSalaire: employe.pourcentageSalaire?.toString() || '',
                statut: employe.statut || 'ACTIF',
                dateAccreditation: employe.dateAccreditation || '',
                niveauAccreditation: employe.niveauAccreditation || 'DISTRICT',
                groupeAccreditation: employe.groupeAccreditation || '',
                superviseurHierarchique: employe.superviseurHierarchique || '',
                affectationActuelle: employe.affectationActuelle || ''
            });
            setIsMatriculeAutoGenerated(false);

            if (employe.photoProfil) {
                setPhotoPreview(`http://localhost:8080/uploads/${employe.photoProfil}`);
            }

            // Charger les enfants et diplômes depuis l'API
            if (employe.id) {
                loadEnfants(employe.id);
                loadDiplomes(employe.id);
                // Vérifier le congé actif
                verifierCongeActif(employe.id);
            }
        }
    }, [employe]);

    const loadEnfants = async (employeId: number) => {
        try {
            const data = await employeService.getEnfants(employeId);
            setEnfants(data);
        } catch (error) {
            console.error('Erreur chargement enfants:', error);
        }
    };

    const loadDiplomes = async (employeId: number) => {
        try {
            const data = await employeService.getDiplomes(employeId);
            setDiplomes(data);
        } catch (error) {
            console.error('Erreur chargement diplômes:', error);
        }
    };

    const handleRegenerateMatricule = async () => {
        const newMatricule = await generateMatricule();
        setFormData(prev => ({ ...prev, matricule: newMatricule }));
        setIsMatriculeAutoGenerated(true);
    };

    const handleMatriculeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setFormData(prev => ({ ...prev, matricule: e.target.value }));
        setIsMatriculeAutoGenerated(false);
    };

    const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (file) {
            if (file.size > 10 * 1024 * 1024) {
                setError('Le fichier est trop volumineux (max 10MB)');
                return;
            }

            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!allowedTypes.includes(file.type)) {
                setError('Type de fichier non supporté. Utilisez JPEG, PNG ou GIF.');
                return;
            }

            setPhotoFile(file);
            const reader = new FileReader();
            reader.onload = (e) => {
                setPhotoPreview(e.target?.result as string);
            };
            reader.readAsDataURL(file);
            setError('');
        }
    };

    const handleRemovePhoto = async () => {
        if (employe?.id && employe.photoProfil) {
            try {
                await employeService.deletePhoto(employe.id);
                setPhotoPreview(null);
                setPhotoFile(null);
                setFormData(prev => ({ ...prev, photoProfil: '' }));
            } catch (error) {
                console.error('Erreur suppression photo:', error);
            }
        } else {
            setPhotoPreview(null);
            setPhotoFile(null);
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        try {
            // Validation pour le nouveau poste
            if (formData.poste === 'AUTRE' && !formData.nouveauPoste?.trim()) {
                setError('Veuillez spécifier le nouveau poste');
                setLoading(false);
                return;
            }

            const employeData = {
                ...formData,
                poste: formData.poste, // Garder "AUTRE" si sélectionné
                postePersonnalise: formData.poste === 'AUTRE' ? formData.nouveauPoste?.trim() : null,
                salaireBase: formData.salaireBase ? parseFloat(formData.salaireBase) : 0,
                pourcentageSalaire: formData.pourcentageSalaire ? parseFloat(formData.pourcentageSalaire) : 0,
                dateMariage: formData.dateMariage || null,
                dateDebut: formData.dateDebut || null,
                dateFin: formData.dateFin || null,
                dateAccreditation: formData.dateAccreditation || null,
                nombreEnfants: enfants.length,
                affectationActuelle: affectationActuelleAuto
            };

            // Créer une copie sans le champ nouveauPoste
            const { nouveauPoste, ...employeDataToSend } = employeData;

            let savedEmploye: Employe;

            if (employe) {
                // @ts-ignore
                savedEmploye = await employeService.updateEmploye(employe.id, employeDataToSend);
            } else {
                // @ts-ignore
                savedEmploye = await employeService.createEmploye(employeDataToSend);
            }

            // Sauvegarder les enfants
            for (const enfant of enfants) {
                if (savedEmploye.id) {
                    await employeService.saveEnfant(savedEmploye.id, enfant);
                }
            }

            // Sauvegarder les diplômes
            for (const diplome of diplomes) {
                if (savedEmploye.id) {
                    await employeService.saveDiplome(savedEmploye.id, diplome);
                }
            }

            // Upload de la photo
            if (photoFile && savedEmploye.id) {
                setUploadingPhoto(true);
                try {
                    await employeService.uploadPhoto(savedEmploye.id, photoFile);
                } catch (uploadError) {
                    console.error('Erreur upload photo:', uploadError);
                    setError('Erreur lors de l\'upload de la photo, mais l\'employé a été sauvegardé');
                } finally {
                    setUploadingPhoto(false);
                }
            }

            onSave();
            onClose();
        } catch (err: any) {
            console.error('Erreur complète:', err);
            const errorMessage = err.response?.data?.message || err.message || 'Erreur lors de la sauvegarde';
            setError(`Erreur: ${errorMessage}`);
        } finally {
            setLoading(false);
        }
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleAddEnfant = () => {
        if (nouvelEnfant.nom && nouvelEnfant.dateNaissance) {
            setEnfants([...enfants, { ...nouvelEnfant }]);
            setNouvelEnfant({ nom: '', dateNaissance: '' });
        }
    };

    const handleRemoveEnfant = (index: number) => {
        const newEnfants = [...enfants];
        newEnfants.splice(index, 1);
        setEnfants(newEnfants);
    };

    const handleAddDiplome = () => {
        if (nouveauDiplome.typeDiplome && nouveauDiplome.intitule) {
            setDiplomes([...diplomes, { ...nouveauDiplome }]);
            setNouveauDiplome({ typeDiplome: '', intitule: '', ecole: '', anneeObtention: '' });
        }
    };

    const handleRemoveDiplome = (index: number) => {
        const newDiplomes = [...diplomes];
        newDiplomes.splice(index, 1);
        setDiplomes(newDiplomes);
    };

    const formatDate = (date: string | undefined) => {
        if (!date) return 'Non spécifiée';
        return new Date(date).toLocaleDateString('fr-FR');
    };

    return (
        <div className="bg-white rounded-lg w-full overflow-y-auto border-2 border-blue-500">
            <div className="flex items-center justify-between p-6 border-b">
                <h2 className="text-2xl font-bold text-gray-900">
                    {employe ? 'Modifier l\'employé' : 'Nouvel employé'}
                </h2>
                <button onClick={onClose} className="p-2 rounded-md hover:bg-gray-100">
                    <X className="w-5 h-5"/>
                </button>
            </div>

            <form onSubmit={handleSubmit} className="p-6 space-y-8">
                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                        {error}
                    </div>
                )}

                {hasCongeActif && congeActif && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4">
                        <div className="flex items-center">
                            <Calendar className="w-5 h-5 text-yellow-600 mr-2" />
                            <h3 className="text-lg font-medium text-yellow-800">Congé en cours</h3>
                        </div>
                        <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                            <div>
                                <span className="text-yellow-700">Type: </span>
                                <span className="font-medium">{congeActif.typeConge || 'Non spécifié'}</span>
                            </div>
                            <div>
                                <span className="text-yellow-700">Du: </span>
                                <span className="font-medium">{formatDate(congeActif.dateDebut)}</span>
                            </div>
                            <div>
                                <span className="text-yellow-700">Au: </span>
                                <span className="font-medium">{formatDate(congeActif.dateFin)}</span>
                            </div>
                            <div>
                                <span className="text-yellow-700">Motif: </span>
                                <span className="font-medium">{congeActif.motif || 'Non spécifié'}</span>
                            </div>
                        </div>
                        <div className="mt-2">
                            <p className="text-xs text-yellow-600">
                                Le statut de l'employé est automatiquement défini sur "EN_CONGE" tant que ce congé est actif.
                            </p>
                        </div>
                    </div>
                )}

                {/* Affichage du congé actif */}
                {hasCongeActif && congeActif && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4">
                        <div className="flex items-center">
                            <Calendar className="w-5 h-5 text-yellow-600 mr-2" />
                            <h3 className="text-lg font-medium text-yellow-800">Congé en cours</h3>
                        </div>
                        <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                            <div>
                                <span className="text-yellow-700">Type: </span>
                                <span className="font-medium">{congeActif.typeConge || 'Non spécifié'}</span>
                            </div>
                            <div>
                                <span className="text-yellow-700">Du: </span>
                                <span className="font-medium">{formatDate(congeActif.dateDebut)}</span>
                            </div>
                            <div>
                                <span className="text-yellow-700">Au: </span>
                                <span className="font-medium">{formatDate(congeActif.dateFin)}</span>
                            </div>
                            <div>
                                <span className="text-yellow-700">Motif: </span>
                                <span className="font-medium">{congeActif.motif || 'Non spécifié'}</span>
                            </div>
                        </div>
                        <div className="mt-2">
                            <p className="text-xs text-yellow-600">
                                Le statut de l'employé est automatiquement défini sur "EN_CONGE" tant que ce congé est actif.
                            </p>
                        </div>
                    </div>
                )}

                {/* Informations personnelles */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                        <User className="w-5 h-5 mr-2"/>
                        Informations personnelles
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div className="relative">
                            <label className="block text-sm font-medium text-gray-700">Matricule *</label>
                            <div className="flex items-center">
                                <input
                                    type="text"
                                    name="matricule"
                                    value={formData.matricule}
                                    onChange={handleMatriculeChange}
                                    required
                                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 pr-10"
                                />
                                {!employe && (
                                    <button
                                        type="button"
                                        onClick={handleRegenerateMatricule}
                                        className="absolute right-2 top-8 p-1 text-gray-500 hover:text-blue-600"
                                        title="Regénérer le matricule"
                                    >
                                        <RefreshCw className="w-4 h-4" />
                                    </button>
                                )}
                            </div>
                            {isMatriculeAutoGenerated && (
                                <p className="text-xs text-green-600 mt-1">Matricule généré automatiquement</p>
                            )}
                            {!isMatriculeAutoGenerated && (
                                <p className="text-xs text-blue-600 mt-1">Matricule modifié manuellement</p>
                            )}
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Nom *</label>
                            <input
                                type="text"
                                name="nom"
                                value={formData.nom}
                                onChange={handleChange}
                                required
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Prénom *</label>
                            <input
                                type="text"
                                name="prenom"
                                value={formData.prenom}
                                onChange={handleChange}
                                required
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Date de naissance *</label>
                            <input
                                type="date"
                                name="dateNaissance"
                                value={formData.dateNaissance}
                                onChange={handleChange}
                                required
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Lieu de naissance</label>
                            <input
                                type="text"
                                name="lieuNaissance"
                                value={formData.lieuNaissance}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Nationalité</label>
                            <input
                                type="text"
                                name="nationalite"
                                value={formData.nationalite}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">CIN</label>
                            <input
                                type="text"
                                name="cin"
                                value={formData.cin}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Statut matrimonial</label>
                            <select
                                name="statutMatrimonial"
                                value={formData.statutMatrimonial}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            >
                                <option value="CELIBATAIRE">Célibataire</option>
                                <option value="MARIE">Marié(e)</option>
                                <option value="DIVORCE">Divorcé(e)</option>
                                <option value="VEUF">Veuf/Veuve</option>
                            </select>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Numéro CNAPS</label>
                            <input
                                type="text"
                                name="numeroCNAPS"
                                value={formData.numeroCNAPS}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                    </div>
                </div>

                {/* Informations familiales pour les personnes mariées */}
                {formData.statutMatrimonial === 'MARIE' && (
                    <div>
                        <h3 className="text-lg font-medium text-gray-900 mb-4">Informations familiales</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700">Date de mariage</label>
                                <input
                                    type="date"
                                    name="dateMariage"
                                    value={formData.dateMariage}
                                    onChange={handleChange}
                                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700">Nom du conjoint</label>
                                <input
                                    type="text"
                                    name="nomConjoint"
                                    value={formData.nomConjoint}
                                    onChange={handleChange}
                                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700">Date de naissance du conjoint</label>
                                <input
                                    type="date"
                                    name="dateNaissanceConjoint"
                                    value={formData.dateNaissanceConjoint}
                                    onChange={handleChange}
                                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                        </div>

                        {/* Gestion des enfants */}
                        <div className="mt-6">
                            <h4 className="text-md font-medium text-gray-900 mb-3">Enfants</h4>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700">Nom</label>
                                    <input
                                        type="text"
                                        value={nouvelEnfant.nom}
                                        onChange={(e) => setNouvelEnfant({...nouvelEnfant, dateNaissance: e.target.value})}
                                        className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                    />
                                </div>
                            </div>
                            <button
                                type="button"
                                onClick={handleAddEnfant}
                                className="inline-flex items-center px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                            >
                                <Plus className="w-4 h-4 mr-1" />
                                Ajouter un enfant
                            </button>

                            {enfants.length > 0 && (
                                <div className="mt-4 space-y-2">
                                    {enfants.map((enfant, index) => (
                                        <div key={index} className="flex items-center justify-between bg-gray-100 p-2 rounded">
                                            <span>{enfant.nom} - {enfant.dateNaissance}</span>
                                            <button
                                                type="button"
                                                onClick={() => handleRemoveEnfant(index)}
                                                className="text-red-600 hover:text-red-800"
                                            >
                                                <Trash2 className="w-4 h-4" />
                                            </button>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* Diplômes et formations */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Diplômes et formations</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Type de diplôme</label>
                            <select
                                value={nouveauDiplome.typeDiplome}
                                onChange={(e) => setNouveauDiplome({...nouveauDiplome, typeDiplome: e.target.value})}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            >
                                <option value="">Sélectionner</option>
                                <option value="CEPE">CEPE</option>
                                <option value="BEPC">BEPC</option>
                                <option value="BACC">BACC</option>
                                <option value="LICENCE">Licence</option>
                                <option value="MASTER">Master</option>
                                <option value="DOCTORAT">Doctorat</option>
                                <option value="AUTRE">Autre</option>
                            </select>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Intitulé</label>
                            <input
                                type="text"
                                value={nouveauDiplome.intitule}
                                onChange={(e) => setNouveauDiplome({...nouveauDiplome, intitule: e.target.value})}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">École/Université</label>
                            <input
                                type="text"
                                value={nouveauDiplome.ecole}
                                onChange={(e) => setNouveauDiplome({...nouveauDiplome, ecole: e.target.value})}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Année d'obtention</label>
                            <input
                                type="number"
                                value={nouveauDiplome.anneeObtention}
                                onChange={(e) => setNouveauDiplome({...nouveauDiplome, anneeObtention: e.target.value})}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                min="1900"
                                max="2100"
                            />
                        </div>
                    </div>
                    <button
                        type="button"
                        onClick={handleAddDiplome}
                        className="inline-flex items-center px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                    >
                        <Plus className="w-4 h-4 mr-1" />
                        Ajouter un diplôme
                    </button>

                    {diplomes.length > 0 && (
                        <div className="mt-4 space-y-2">
                            {diplomes.map((diplome, index) => (
                                <div key={index} className="flex items-center justify-between bg-gray-100 p-2 rounded">
                                    <span>{diplome.typeDiplome} - {diplome.intitule} ({diplome.anneeObtention})</span>
                                    <button
                                        type="button"
                                        onClick={() => handleRemoveDiplome(index)}
                                        className="text-red-600 hover:text-red-800"
                                    >
                                        <Trash2 className="w-4 h-4" />
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* Contact */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                        <Phone className="w-5 h-5 mr-2"/>
                        Contact
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Téléphone</label>
                            <input
                                type="tel"
                                name="telephone"
                                value={formData.telephone}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Email</label>
                            <input
                                type="email"
                                name="email"
                                value={formData.email}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div className="md:col-span-2 lg:col-span-3">
                            <label className="block text-sm font-medium text-gray-700">Adresse</label>
                            <textarea
                                name="adresse"
                                value={formData.adresse}
                                onChange={handleChange}
                                rows={3}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                    </div>
                </div>

                {/* Contact d'urgence */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Contact d'urgence</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Nom</label>
                            <input
                                type="text"
                                name="contactUrgenceNom"
                                value={formData.contactUrgenceNom}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Lien</label>
                            <input
                                type="text"
                                name="contactUrgenceLien"
                                value={formData.contactUrgenceLien}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Téléphone</label>
                            <input
                                type="tel"
                                name="contactUrgenceTelephone"
                                value={formData.contactUrgenceTelephone}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                    </div>
                </div>

                {/* Informations familiales */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Informations familiales</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Nom du père</label>
                            <input
                                type="text"
                                name="nomPere"
                                value={formData.nomPere}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Nom de la mère</label>
                            <input
                                type="text"
                                name="nomMere"
                                value={formData.nomMere}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                    </div>
                </div>

                {/* Informations professionnelles */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                        <Briefcase className="w-5 h-5 mr-2"/>
                        Informations professionnelles
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Poste *</label>
                            <select
                                name="poste"
                                value={formData.poste}
                                onChange={handleChange}
                                required
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            >
                                <option value="EVANGELISTE">Évangéliste</option>
                                <option value="PASTEUR_STAGIAIRE">Pasteur stagiaire</option>
                                <option value="PASTEUR_AUTORISE">Pasteur autorisé</option>
                                <option value="PASTEUR_CONSACRE">Pasteur consacré</option>
                                <option value="VERIFICATEUR">VERIFICATEUR</option>
                                <option value="SECRETAIRE_EXECUTIF">Secrétaire exécutif</option>
                                <option value="TRESORIER">Trésorier</option>
                                <option value="ASSISTANT_RH">Assistant RH</option>
                                <option value="AUTRE">Autre</option>
                            </select>
                        </div>

                        {/* Champ conditionnel pour nouveau poste */}
                        {formData.poste === 'AUTRE' && (
                            <div>
                                <label className="block text-sm font-medium text-gray-700">Spécifier le nouveau poste *</label>
                                <input
                                    type="text"
                                    name="nouveauPoste"
                                    value={formData.nouveauPoste || ''}
                                    onChange={handleChange}
                                    required
                                    placeholder="Entrez le nom du nouveau poste"
                                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                        )}

                        <div>
                            <label className="block text-sm font-medium text-gray-700">
                                Statut *
                                {hasCongeActif && (
                                    <span className="text-xs text-yellow-600 ml-2">(Automatique: EN_CONGE)</span>
                                )}
                            </label>
                            <select
                                name="statut"
                                value={formData.statut}
                                onChange={handleChange}
                                required
                                disabled={hasCongeActif}
                                className={`mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500 ${
                                    hasCongeActif ? 'bg-gray-100 cursor-not-allowed' : ''
                                }`}
                            >
                                <option value="ACTIF">Actif</option>
                                <option value="INACTIF">Inactif</option>
                                <option value="EN_CONGE">En congé</option>
                            </select>
                            {hasCongeActif && (
                                <p className="text-xs text-yellow-600 mt-1">
                                    Le statut est verrouillé car l'employé a un congé en cours
                                </p>
                            )}
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700">Type de contrat</label>
                            <select
                                name="typeContrat"
                                value={formData.typeContrat}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            >
                                <option value="CDD">CDD</option>
                                <option value="CDI">CDI</option>
                                <option value="BENEVOLAT">Bénévolat</option>
                            </select>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700">Date de début</label>
                            <input
                                type="date"
                                name="dateDebut"
                                value={formData.dateDebut}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700">Date de fin (CDD)</label>
                            <input
                                type="date"
                                name="dateFin"
                                value={formData.dateFin}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700">Organisation employeur</label>
                            <input
                                type="text"
                                name="organisationEmployeur"
                                value={formData.organisationEmployeur}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                    </div>
                </div>
                {/* Rémunération */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                        <DollarSign className="w-5 h-5 mr-2"/>
                        Rémunération
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Salaire de base</label>
                            <input
                                type="number"
                                name="salaireBase"
                                value={formData.salaireBase}
                                onChange={handleChange}
                                step="0.01"
                                min="0"
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Pourcentage de salaire (%)</label>
                            <input
                                type="number"
                                name="pourcentageSalaire"
                                value={formData.pourcentageSalaire}
                                onChange={handleChange}
                                step="0.01"
                                min="0"
                                max="100"
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                    </div>
                </div>

                {/* Accréditation */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                        <Percent className="w-5 h-5 mr-2"/>
                        Accréditation
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Date d'accréditation</label>
                            <input
                                type="date"
                                name="dateAccreditation"
                                value={formData.dateAccreditation}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Niveau d'accréditation</label>
                            <select
                                name="niveauAccreditation"
                                value={formData.niveauAccreditation}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            >
                                <option value="DISTRICT">District</option>
                                <option value="FEDERATION">Fédération</option>
                            </select>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Groupe d'accréditation</label>
                            <input
                                type="text"
                                name="groupeAccreditation"
                                value={formData.groupeAccreditation}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Superviseur hiérarchique</label>
                            <input
                                type="text"
                                name="superviseurHierarchique"
                                value={formData.superviseurHierarchique}
                                onChange={handleChange}
                                className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                        <div className="md:col-span-2">
                            <label className="block text-sm font-medium text-gray-700">Affectation actuelle</label>
                            <div className="mt-1 p-2 bg-gray-100 rounded-md">
                                <p className="text-gray-800">
                                    {affectationActuelleAuto || "Aucune affectation enregistrée"}
                                </p>
                                <p className="text-xs text-gray-500 mt-1">
                                    Calculée automatiquement à partir des affectations pastorales
                                </p>
                            </div>
                            {/* Garder le champ caché pour la soumission du formulaire */}
                            <input
                                type="hidden"
                                name="affectationActuelle"
                                value={affectationActuelleAuto}
                            />
                        </div>
                    </div>
                </div>

                {/* Photo de profil */}
                <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                        <Camera className="w-5 h-5 mr-2"/>
                        Photo de profil
                    </h3>
                    <div className="flex items-center space-x-4">
                        {photoPreview ? (
                            <div className="relative">
                                <img
                                    src={photoPreview}
                                    alt="Preview"
                                    className="w-32 h-32 rounded-full object-cover border-2 border-gray-300"
                                />
                                <button
                                    type="button"
                                    onClick={handleRemovePhoto}
                                    className="absolute -top-2 -right-2 bg-red-600 text-white rounded-full p-1 hover:bg-red-700"
                                >
                                    <X className="w-4 h-4" />
                                </button>
                            </div>
                        ) : (
                            <div className="w-32 h-32 rounded-full bg-gray-200 flex items-center justify-center border-2 border-dashed border-gray-300">
                                <User className="w-12 h-12 text-gray-400" />
                            </div>
                        )}
                        <div>
                            <input
                                type="file"
                                ref={fileInputRef}
                                onChange={handlePhotoChange}
                                accept="image/*"
                                className="hidden"
                            />
                            <button
                                type="button"
                                onClick={() => fileInputRef.current?.click()}
                                className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                            >
                                <Upload className="w-4 h-4 mr-2" />
                                {photoPreview ? 'Changer la photo' : 'Ajouter une photo'}
                            </button>
                            <p className="text-sm text-gray-500 mt-2">JPEG, PNG ou GIF (max 10MB)</p>
                        </div>
                    </div>
                </div>

                {/* Actions */}
                <div className="flex justify-end space-x-4 pt-6 border-t">
                    <button
                        type="button"
                        onClick={onClose}
                        className="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300"
                    >
                        Annuler
                    </button>
                    <button
                        type="submit"
                        disabled={loading}
                        className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                    >
                        {loading ? (
                            <>
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                Sauvegarde...
                            </>
                        ) : (
                            <>
                                <Save className="w-4 h-4 mr-2" />
                                Sauvegarder
                            </>
                        )}
                    </button>
                </div>
            </form>
        </div>
    );
};

export default EmployeForm;